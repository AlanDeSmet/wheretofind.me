# Generated by Django 2.1.5 on 2019-02-02 05:14

from urllib.parse import urlparse

from django.db import migrations

icon_predicates = [
    {"fn": lambda url: True, "val": "fas fa-link"},
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("behance.net"),
        "val": "fab fa-behance",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("bitbucket.org"),
        "val": "fab fa-bitbucket",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("codepen.io"),
        "val": "fab fa-codepen",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("deviantart.com"),
        "val": "fab fa-deviantart",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("discordapp.com"),
        "val": "fab fa-discord",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("dribbble.com"),
        "val": "fab fa-dribbble",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("ello.co"),
        "val": "fab fa-ello",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("etsy.com"),
        "val": "fab fa-etsy",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("facebook.com"),
        "val": "fab fa-facebook",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("github.com"),
        "val": "fab fa-github",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("gitlab.com"),
        "val": "fab fa-gitlab",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("goodreads.com"),
        "val": "fab fa-goodreads",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("instagram.com"),
        "val": "fab fa-instagram",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("keybase.io"),
        "val": "fab fa-keybase",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("kickstarter.com"),
        "val": "fab fa-kickstarter",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("last.fm"),
        "val": "fab fa-lastfm",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("medium.com"),
        "val": "fab fa-medium",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("patreon.com"),
        "val": "fab fa-patreon",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("paypal.com"),
        "val": "fab fa-paypal",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("pinterest.com"),
        "val": "fab fa-pinterest",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("plus.google.com"),
        "val": "fab fa-google-plus-g",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("ravelry.com"),
        "val": "fab fa-ravelry",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("reddit.com"),
        "val": "fab fa-reddit",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("skype.com"),
        "val": "fab fa-skype",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("slack.com"),
        "val": "fab fa-slack",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("snapchat.com"),
        "val": "fab fa-snapchat",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("soundcloud.com"),
        "val": "fab fa-soundcloud",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("stackoverflow.com"),
        "val": "fab fa-stackoverflow",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("steamcommunity.com"),
        "val": "fab fa-steam",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("teamspeak.com"),
        "val": "fab fa-teamspeak",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("tumblr.com"),
        "val": "fab fa-tumblr",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("twitch.tv"),
        "val": "fab fa-twitch",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("twitter.com"),
        "val": "fab fa-twitter",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("untappd.com"),
        "val": "fab fa-untappd",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("vimeo.com"),
        "val": "fab fa-vimeo",
    },
    {
        "fn": lambda url: (urlparse(url).hostname or "").endswith("youtube.com"),
        "val": "fab fa-youtube",
    },
    {
        "fn": lambda url: "pora" in (urlparse(url).hostname or ""),
        "val": "fab fa-diaspora",
    },
    {
        "fn": lambda url: "mastodon" in (urlparse(url).hostname or ""),
        "val": "fab fa-mastodon",
    },
    {"fn": lambda url: urlparse(url).scheme == "mailto:", "val": "fas fa-envelope"},
]


def guess_icon(url):
    """
    This finds the last guesser that matches the provided URL. This is to match the
    JavaScript logic, and could be done elsewise here, but for consistency's sake works
    like this.
    """
    guess = ""
    for checker in icon_predicates:
        if checker["fn"](url):
            guess = checker["val"]
    return guess


def forwards(apps, schema_editor):
    InternetIdentity = apps.get_model("wheretofindme", "InternetIdentity")
    for identity in InternetIdentity.objects.all():
        identity.icon = guess_icon(identity.url)
        identity.save()


def backwards(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [("wheretofindme", "0013_auto_20190131_0739")]

    operations = [migrations.RunPython(forwards, backwards)]
